{"version":3,"sources":["asset/bg.jpg","theme/index.js","components/Board/Board.jsx","components/WholePage/WholePage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","theme","colors","white","black","red","darkBlue","green","yellow","fonts","category","status","main","fontSize","StyledBoard","styled","div","props","Board","useState","display","setDisplay","displayOdds","setDisplayOdds","chooseOneFunction","team","chooseOne","ifRepeat","console","log","makeSureNoRepeat","data","Math","floor","random","length","sport","state","odds1","toFixed","odds2","odds3","localStorage","setItem","JSON","stringify","playPromise","Audio","play","undefined","then","catch","playAudio","useEffect","getData","parse","getItem","getOdds","className","country","group","onClick","homeName","awayName","StyledWholePage","bg","WholePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95c4f682.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.d4317ec0.jpg\";","// colors\r\nconst white = '#F5F5DC';\r\nconst black = '#000000';\r\nconst red = '#800000';\r\nconst darkBlue = '#020024';\r\nconst green = '#1c411c';\r\nconst yellow = '#69f90e';\r\n\r\nconst theme = {\r\n  colors: {\r\n    white,\r\n    black,\r\n    red,\r\n    darkBlue,\r\n    green,\r\n    yellow,\r\n  },\r\n  fonts: {\r\n    category: `'Righteous', cursive`,\r\n    status: `'Roboto Mono', monospace`,\r\n    main: `'Patua One', cursive;`,\r\n  },\r\n  fontSize: ['16px', '22px', '28px', '36px'],\r\n};\r\n\r\nexport default theme;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport data from '../../asset/test-assignment.json';\r\n\r\nconst Board = () => {\r\n  const [display, setDisplay] = useState([]);\r\n  const [displayOdds, setDisplayOdds] = useState([]);\r\n\r\n  const chooseOneFunction = (category, team) => {\r\n    const ifRepeat = category;\r\n    let chooseOne;\r\n\r\n    console.log(`You voted for ${team}`);\r\n\r\n    // pick a random poll\r\n    const makeSureNoRepeat = () => {\r\n      chooseOne = data[Math.floor(Math.random() * data.length)];\r\n    };\r\n\r\n    makeSureNoRepeat();\r\n\r\n    // after voting picking another random poll with different category\r\n    while (chooseOne.sport === ifRepeat || chooseOne.state === 'FINISHED') {\r\n      makeSureNoRepeat();\r\n    }\r\n    // generate random odds between 1 to 4\r\n    const odds1 = (Math.random() * (4 - 1) + 1).toFixed(2);\r\n    const odds2 = (Math.random() * (4 - 1) + 1).toFixed(2);\r\n    const odds3 = (Math.random() * (4 - 1) + 1).toFixed(2);\r\n    setDisplay(chooseOne);\r\n    setDisplayOdds([odds1, odds2, odds3]);\r\n\r\n    // set data into local storage\r\n    localStorage.setItem('sport poll', JSON.stringify(chooseOne));\r\n    localStorage.setItem('sport odds', JSON.stringify([odds1, odds2, odds3]));\r\n\r\n    // let's play some music!!!!!!!!\r\n    const playAudio = () => {\r\n      const sound = new Audio(\r\n        'http://www.chiptape.com/chiptape/sounds/medium/drop.wav'\r\n      );\r\n      const playPromise = sound.play();\r\n\r\n      if (playPromise !== undefined) {\r\n        playPromise\r\n          .then(() => {\r\n            // console.log('audio play successfully');\r\n          })\r\n          .catch(() => {\r\n            console.log('error');\r\n          });\r\n      }\r\n    };\r\n    playAudio();\r\n  };\r\n\r\n  // when firstly rendering the app, check if there's any previous data in local storage, if yes, then get the data from local storage; if not, then generate new data\r\n  useEffect(() => {\r\n    const getData = JSON.parse(localStorage.getItem('sport poll'));\r\n    const getOdds = JSON.parse(localStorage.getItem('sport odds'));\r\n    if (getData) {\r\n      setDisplay(getData);\r\n      setDisplayOdds(getOdds);\r\n    } else {\r\n      chooseOneFunction('', '');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <div className='category'>\r\n        {display.sport === 'ICE_HOCKEY' ? 'ICE HOCKEY' : display.sport}\r\n      </div>\r\n      <div className='status-and-country'>\r\n        <div\r\n          className={\r\n            display.state === 'STARTED' ? 'status green' : 'status red'\r\n          }\r\n        >\r\n          {display.state === 'STARTED' ? 'STARTED' : 'NOT STARTED'}\r\n        </div>\r\n        <div className='country'>{display.country}</div>\r\n      </div>\r\n      <div className='group'>\r\n        <span>{display.group}</span>\r\n      </div>\r\n      <div className='teams'>\r\n        <div\r\n          className='border-right'\r\n          onClick={() => chooseOneFunction(display.sport, display.homeName)}\r\n        >\r\n          <div className='team-name'>\r\n            <span>{display.homeName}</span>\r\n          </div>\r\n          <div className='odds one'>\r\n            <span>{displayOdds[0]}</span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className='border-right'\r\n          onClick={() => chooseOneFunction(display.sport, 'Draw')}\r\n        >\r\n          <div className='draw'>\r\n            <span>Draw</span>\r\n          </div>\r\n          <div className='odds'>\r\n            <span>{displayOdds[1]}</span>\r\n          </div>\r\n        </div>\r\n        <div onClick={() => chooseOneFunction(display.sport, display.awayName)}>\r\n          <div className='team-name'>\r\n            <span>{display.awayName}</span>\r\n          </div>\r\n          <div className='odds three'>\r\n            <span>{displayOdds[2]}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </StyledBoard>\r\n  );\r\n};\r\n\r\nconst StyledBoard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  box-shadow: 20px 20px 20px 0px rgba(0, 0, 0, 0.8);\r\n\r\n  div {\r\n    width: 100%;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n  }\r\n\r\n  .category {\r\n    display: flex;\r\n    border-bottom: 2px solid ${props => props.theme.colors.white};\r\n    background: rgb(2, 0, 36);\r\n    background: radial-gradient(\r\n      circle,\r\n      rgba(2, 0, 36, 1) 35%,\r\n      rgba(128, 0, 0, 1) 85%,\r\n      rgba(255, 0, 95, 1) 100%\r\n    );\r\n    color: ${props => props.theme.colors.white};\r\n    font-size: ${props => props.theme.fontSize[3]};\r\n    font-family: ${props => props.theme.fonts.category};\r\n  }\r\n\r\n  .status-and-country {\r\n    display: flex;\r\n    font-family: ${props => props.theme.fonts.status};\r\n    background-image: linear-gradient(#3ca3ff, #005eb3);\r\n    font-weight: bold;\r\n    font-size: ${props => props.theme.fontSize[2]};\r\n    border-bottom: 2px solid ${props => props.theme.colors.white};\r\n    box-shadow: 20px 20px 20px 0px rgba(0, 0, 0, 0.8);\r\n\r\n    .status {\r\n      text-align: left;\r\n      width: 50vw;\r\n      margin-left: 20px;\r\n    }\r\n\r\n    .green {\r\n      color: ${props => props.theme.colors.green};\r\n    }\r\n    .red {\r\n      color: ${props => props.theme.colors.red};\r\n    }\r\n    .country {\r\n      text-align: right;\r\n      width: 50vw;\r\n      color: ${props => props.theme.colors.darkBlue};\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n\r\n  .group {\r\n    background: rgb(255, 127, 80);\r\n    background: radial-gradient(\r\n      circle,\r\n      rgba(255, 127, 80, 1) 36%,\r\n      rgba(128, 0, 0, 1) 100%\r\n    );\r\n    color: ${props => props.theme.colors.white};\r\n    line-height: 2;\r\n    font-size: ${props => props.theme.fontSize[2]};\r\n    border-bottom: 2px solid ${props => props.theme.colors.white};\r\n  }\r\n\r\n  .teams {\r\n    display: flex;\r\n    flex-grow: 6;\r\n    flex-shrink: 1;\r\n    flex-basis: 0%;\r\n\r\n    .border-right {\r\n      border-right: 1px solid ${props => props.theme.colors.white};\r\n    }\r\n\r\n    div {\r\n      height: 100%;\r\n      width: 100%;\r\n      &:hover {\r\n        cursor: pointer;\r\n        border-radius: 10px;\r\n        box-shadow: 0 0 5px 5px rgba(131, 58, 180, 1);\r\n      }\r\n\r\n      .team-name,\r\n      .draw {\r\n        height: 80%;\r\n        font-size: ${props => props.theme.fontSize[2]};\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        color: ${props => props.theme.colors.yellow};\r\n        background: rgb(19, 11, 107);\r\n        background: radial-gradient(\r\n          circle,\r\n          rgba(19, 11, 107, 1) 0%,\r\n          rgba(2, 0, 36, 1) 0%,\r\n          rgba(13, 16, 158, 1) 100%\r\n        );\r\n      }\r\n\r\n      .odds {\r\n        height: 20%;\r\n        font-size: ${props => props.theme.fontSize[1]};\r\n        color: ${props => props.theme.colors.white};\r\n        background: rgb(32, 40, 156);\r\n        background: linear-gradient(\r\n          90deg,\r\n          rgba(32, 40, 156, 1) 12%,\r\n          rgba(51, 16, 66, 1) 100%\r\n        );\r\n      }\r\n    }\r\n  }\r\n  @media only screen and (min-width: 769px) {\r\n    /* tablets and desktop */\r\n    width: 768px;\r\n    height: 400px;\r\n    background-color: ${props => props.theme.colors.white};\r\n    border-radius: 20px;\r\n    .category {\r\n      flex-grow: 2;\r\n      flex-shrink: 1;\r\n      flex-basis: 0%;\r\n      border-top-left-radius: 20px;\r\n      border-top-right-radius: 20px;\r\n    }\r\n    .teams {\r\n      border-bottom-left-radius: 20px;\r\n      border-bottom-right-radius: 20px;\r\n      .team-name,\r\n      .draw {\r\n        &:hover {\r\n          transform: scale(1.05);\r\n        }\r\n      }\r\n    }\r\n    .odds {\r\n      line-height: 2;\r\n    }\r\n    .one {\r\n      border-bottom-left-radius: 20px;\r\n    }\r\n    .three {\r\n      border-bottom-right-radius: 20px;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) and (orientation: landscape) {\r\n    /* landscape phones */\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: ${props => props.theme.colors.white};\r\n    .group,\r\n    .odds {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) and (orientation: portrait) {\r\n    /* portrait phones */\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: ${props => props.theme.colors.white};\r\n\r\n    .group,\r\n    .odds {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n    .teams {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from '../Board/Board';\r\nimport bg from '../../asset/bg.jpg';\r\n\r\nconst WholePage = () => {\r\n  return (\r\n    <StyledWholePage>\r\n      <Board />\r\n    </StyledWholePage>\r\n  );\r\n};\r\n\r\nconst StyledWholePage = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: ${props => props.theme.colors.black};\r\n  background-image: url(${bg});\r\n  background-repeat: no-repeat;\r\n  background-size: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default WholePage;\r\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\nimport WholePage from './components/WholePage/WholePage';\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <WholePage />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}