{"version":3,"sources":["asset/bg.jpg","theme/index.js","components/Board/Board.jsx","components/WholePage/WholePage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","theme","colors","white","black","red","orange","fonts","category","status","main","fontSize","StyledBoard","styled","div","props","Board","useState","display","setDisplay","displayOdds","setDisplayOdds","chooseOneFunction","team","chooseOne","ifRepeat","console","log","noFinishedEvent","data","filter","d","makeSureNoRepeat","Math","floor","random","length","sport","odds1","toFixed","odds2","odds3","localStorage","setItem","JSON","stringify","useEffect","getData","parse","getItem","getOdds","className","state","country","group","onClick","homeName","awayName","StyledWholePage","bg","WholePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49101e89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.d4317ec0.jpg\";","// colors\r\nconst white = '#F5F5DC';\r\nconst black = '#000000';\r\nconst red = '#800000';\r\nconst orange = '#FF7F50';\r\n\r\nconst theme = {\r\n  colors: {\r\n    white,\r\n    black,\r\n    red,\r\n    orange,\r\n  },\r\n  fonts: {\r\n    category: `'Righteous', cursive`,\r\n    status: `'Roboto Mono', monospace`,\r\n    main: `'Patua One', cursive;`,\r\n  },\r\n  fontSize: ['16px', '22px', '28px', '36px'],\r\n};\r\n\r\nexport default theme;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport data from '../../asset/test-assignment.json';\r\n\r\nconst Board = () => {\r\n  const [display, setDisplay] = useState([]);\r\n  const [displayOdds, setDisplayOdds] = useState([]);\r\n\r\n  const chooseOneFunction = (category, team) => {\r\n    const ifRepeat = category;\r\n    let chooseOne;\r\n\r\n    console.log(`You voted for ${team}`);\r\n    const noFinishedEvent = data.filter(d => d.status !== 'FINISHED');\r\n\r\n    const makeSureNoRepeat = () => {\r\n      chooseOne =\r\n        noFinishedEvent[Math.floor(Math.random() * noFinishedEvent.length)];\r\n    };\r\n\r\n    makeSureNoRepeat();\r\n\r\n    while (chooseOne.sport === ifRepeat) {\r\n      makeSureNoRepeat();\r\n    }\r\n\r\n    const odds1 = (Math.random() * (4 - 1) + 1).toFixed(2);\r\n    const odds2 = (Math.random() * (4 - 1) + 1).toFixed(2);\r\n    const odds3 = (Math.random() * (4 - 1) + 1).toFixed(2);\r\n    setDisplay(chooseOne);\r\n    setDisplayOdds([odds1, odds2, odds3]);\r\n    localStorage.setItem('sport poll', JSON.stringify(chooseOne));\r\n    localStorage.setItem('sport odds', JSON.stringify([odds1, odds2, odds3]));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getData = JSON.parse(localStorage.getItem('sport poll'));\r\n    const getOdds = JSON.parse(localStorage.getItem('sport odds'));\r\n    if (getData) {\r\n      setDisplay(getData);\r\n      setDisplayOdds(getOdds);\r\n    } else {\r\n      chooseOneFunction('', '');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <div className='category'>{display.sport}</div>\r\n      <div className='status-and-country'>\r\n        <div className='status'>{display.state}</div>\r\n        <div className='country'>{display.country}</div>\r\n      </div>\r\n      <div className='group'>{display.group}</div>\r\n      <div className='teams'>\r\n        <div onClick={() => chooseOneFunction(display.sport, display.homeName)}>\r\n          <div className='team-name'>{display.homeName}</div>\r\n          <div className='odds'>{displayOdds[0]}</div>\r\n        </div>\r\n        <div onClick={() => chooseOneFunction(display.sport, 'Draw')}>\r\n          <div className='draw'>Draw</div>\r\n          <div className='odds'>{displayOdds[1]}</div>\r\n        </div>\r\n        <div onClick={() => chooseOneFunction(display.sport, display.awayName)}>\r\n          <div className='team-name'>{display.awayName}</div>\r\n          <div className='odds'>{displayOdds[2]}</div>\r\n        </div>\r\n      </div>\r\n    </StyledBoard>\r\n  );\r\n};\r\n\r\nconst StyledBoard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n\r\n  div {\r\n    width: 100%;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n  }\r\n\r\n  .category {\r\n    display: flex;\r\n    flex-grow: 2;\r\n    flex-shrink: 1;\r\n    flex-basis: 0%;\r\n    background: ${props => props.theme.colors.red};\r\n    color: ${props => props.theme.colors.white};\r\n    font-size: ${props => props.theme.fontSize[3]};\r\n    font-family: ${props => props.theme.fonts.category};\r\n  }\r\n\r\n  .status-and-country {\r\n    display: flex;\r\n    font-family: ${props => props.theme.fonts.status};\r\n    background: ${props => props.theme.colors.orange};\r\n    font-weight: bold;\r\n    font-size: ${props => props.theme.fontSize[2]};\r\n    div {\r\n      margin: 0 5px;\r\n    }\r\n    .status {\r\n      text-align: left;\r\n      width: 50vw;\r\n    }\r\n    .country {\r\n      text-align: right;\r\n      width: 50vw;\r\n    }\r\n  }\r\n\r\n  .group {\r\n    background: ${props => props.theme.colors.red};\r\n    color: ${props => props.theme.colors.white};\r\n    line-height: 2;\r\n    font-size: ${props => props.theme.fontSize[2]};\r\n  }\r\n\r\n  .teams {\r\n    display: flex;\r\n    flex-grow: 6;\r\n    flex-shrink: 1;\r\n    flex-basis: 0%;\r\n\r\n    div {\r\n      height: 100%;\r\n      width: 100%;\r\n      border: 1px solid yellow;\r\n\r\n      .team-name {\r\n        height: 80%;\r\n        border: 1px solid green;\r\n      }\r\n      .draw {\r\n        height: 80%;\r\n        border: 1px solid blue;\r\n      }\r\n      .odds {\r\n        height: 20%;\r\n        border: 1px solid red;\r\n        line-height: 2;\r\n        font-size: ${props => props.theme.fontSize[1]};\r\n      }\r\n    }\r\n  }\r\n  @media only screen and (min-width: 769px) {\r\n    /* tablets and desktop */\r\n    width: 768px;\r\n    height: 400px;\r\n    background-color: ${props => props.theme.colors.white};\r\n    border-radius: 20px;\r\n    .category {\r\n      border-top-left-radius: 20px;\r\n      border-top-right-radius: 20px;\r\n    }\r\n    .teams {\r\n      border-bottom-left-radius: 20px;\r\n      border-bottom-right-radius: 20px;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) and (orientation: landscape) {\r\n    /* landscape phones */\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: ${props => props.theme.colors.white};\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) and (orientation: portrait) {\r\n    /* portrait phones */\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: ${props => props.theme.colors.white};\r\n    .teams {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from '../Board/Board';\r\nimport bg from '../../asset/bg.jpg';\r\n\r\nconst WholePage = () => {\r\n  return (\r\n    <StyledWholePage>\r\n      <Board />\r\n    </StyledWholePage>\r\n  );\r\n};\r\n\r\nconst StyledWholePage = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: ${props => props.theme.colors.black};\r\n  background-image: url(${bg});\r\n  background-repeat: no-repeat;\r\n  background-size: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default WholePage;\r\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\nimport WholePage from './components/WholePage/WholePage';\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <WholePage />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}